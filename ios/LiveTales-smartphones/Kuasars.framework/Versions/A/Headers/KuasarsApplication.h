//
//  KuasarsApplication.h
//  KuasarsApplication
//
//  Created by Matteo Novelli on 24/05/13.
//  Copyright (c) 2013 Glass. All rights reserved.
//

/**
 
 KApplication is a local representation of a Kuasar application with all its properties. Also provides all methods needed to manage your Kuasars applications.
 
 It requieres to be logged as a developer before starting to use the methods described in this class. You will find further details about the login process in the Kuasars Core documentation. 
 
 */

#import "KuasarsObject.h"

@interface KuasarsApplication : KuasarsObject

/** @name Application attributes */

/** Unique application framework identifier */
@property (nonatomic, strong, readonly) NSString *ID;

/** Application name */
@property (nonatomic, strong) NSString *name;

/** Brief application description */
@property (nonatomic, strong) NSString *descriptionText;

/** Application developers */
@property (nonatomic, strong, readonly) NSDictionary *developers;

/** Represents if an application require a user session control */
@property (nonatomic, readonly) BOOL userSessionControl;

/** Random key generated by the system, in order to make developer queries for this application */
@property (nonatomic, strong, readonly) NSString *secretKey;

/** Indicates allowed authentication protocols */
@property (nonatomic, strong, readonly) NSArray *thirdPartiesAuthentication;

/** Wildcard field, that could be used by the developer to internal process */
@property (nonatomic, strong, readonly) NSDictionary *custom;

/** Object that store application metaData information. Ex appURLs, logoURL...etc */
@property (nonatomic, strong, readonly) NSDictionary *metadata;

/**
 @name Constructors
 */

/**
 Returns an KApplication object initialized by the JSON object returned by the server
 @param response Dictionary returned by the server
 @return New instance of KApplication
 */

- (KS_INSTANCETYPE)initWithServerResponse:(NSDictionary *)response;

/**
 Returns an KApplication object initialized by name and description
 @param name Name for the application
 @param descriptionText Description for the application
 @return New instance of KApplication
 */
- (KS_INSTANCETYPE)initWithName:(NSString *)name
   descriptionText:(NSString *)descriptionText;

/**
 Returns an KApplication object initialized by id
 @param ID Application identifier
 @return New instance of KApplication
 */
- (KS_INSTANCETYPE)initWithId:(NSString *)ID;

/**
 @name Getting, creating, updating and deleting
 */

/**
 Returns advanced information about a given application
 @param appID App unique identifier
 @param completion Handler with server response
 @discussion Before you can retreive the application information you must create an instance of the class initialized by ID.
 
 */
+ (void)getAppWithID:(NSString *)appID
          completion:(void(^)(KuasarsResponse *object, KuasarsError *error))completion;

/**
 Returns an applications list owned by the current user
 @param completion Handler with server response
 @discussion By implementing the completion handler of this method you will access to the array containing all the applications owned by the current user.
 */
+ (void)getAppsForCurrentUser:(void(^)(KuasarsResponse *object, KuasarsError *error))completion;

/**
 Creates a new application for the current user
 @param completion Handler with server response
 @discussion In order to save new applications on Kuasars server first you must create an instance of the class and then you must set the name and descriptionText properties. The initWithName:description: constructor is available for easy one step initialization.
 
 */
- (void)save:(void(^)(KuasarsResponse *object, KuasarsError *error))completion;

/**
 Replace application's advance information
 @param completion Handler with server response
 @discussion In order to update existing applications first you must get it from the server using methods described in this document.

 
 */
- (void)update:(void(^)(KuasarsResponse *object, KuasarsError *error))completion;

/**
 Removes application from Kuasars server
 @param completion Handler with server response
 @discussion For delete existing applications first you must get it from the server using methods described in this document.
 
 */
- (void)delete:(void(^)(KuasarsResponse *object, KuasarsError *error))completion;

@end
